#version 400 core

in vec2 pass_textur_koordinater;
in vec3 yt_normal;
in vec3 tillLjusVektor;
in vec3 tillKameraVektor;
in float visibilitet;

out vec4 out_Color;

uniform sampler2D bakgrundsTextur;
uniform sampler2D rSampler;
uniform sampler2D gSampler;
uniform sampler2D bSampler;
uniform sampler2D blendKarta;

uniform vec3 ljus_farg;

uniform float shineDamper;
uniform float reflektivitet;
uniform vec3 himmelFarg;

void main(void){
	
	vec4 blendKartaFarg = texture(blendKarta,pass_textur_koordinater);
	
	float backTextureAmount = 1 - (blendKartaFarg.r + blendKartaFarg.g + blendKartaFarg.b);
	
	vec2 tilade_koordinater = pass_textur_koordinater * 40.0;
	
	vec4 backgrunds_textur_farg = texture(bakgrundsTextur, tilade_koordinater) * blendKartaFarg;
	
	vec4 rbackgrunds_textur_farg = texture(rSampler, tilade_koordinater) * blendKartaFarg.r;
	vec4 gbackgrunds_textur_farg = texture(gSampler, tilade_koordinater) * blendKartaFarg.g;
	vec4 bbackgrunds_textur_farg = texture(bSampler, tilade_koordinater) * blendKartaFarg.b;

	vec4 totalFarg = rbackgrunds_textur_farg + gbackgrunds_textur_farg + bbackgrunds_textur_farg;

	vec3 enhet_normal = normalize(yt_normal);
	vec3 enhet_tillLjusVektor = normalize(tillLjusVektor);
	
	float dot_produkt = dot(enhet_normal,enhet_tillLjusVektor);
	
	float ljus_styrka = max(dot_produkt,0.2);
	vec3 diffus = ljus_styrka * ljus_farg;
	
	vec3 enhet_vektor_till_kamera = normalize(tillKameraVektor);
	vec3 ljusriktning = -tillLjusVektor;
	vec3 reflektionsRiktning = reflect(ljusriktning,enhet_normal);
	
	float specularFactor = dot(reflektionsRiktning,enhet_vektor_till_kamera);
	specularFactor = max(specularFactor,0.0);
	float dampedFactor = pow(specularFactor,shineDamper);
	vec3 finalSpecular = dampedFactor * reflektivitet * ljus_farg;
	
	
	out_Color = vec4(diffus,1.0) * totalFarg + vec4(finalSpecular,1.0);
	out_Color = mix(vec4(himmelFarg,1.0),out_Color,visibilitet);
}